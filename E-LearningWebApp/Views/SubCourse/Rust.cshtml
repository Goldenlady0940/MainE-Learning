@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "UserLayout";
}
<main>
    <div id="partitions">
        <div class="partition">
            <h2>Rust Programming Language</h2>
            <p>
                Rust is a systems programming language that emphasizes safety, performance, and concurrency. It was designed to be a "safe, concurrent, and practical language," supporting both functional and imperative-procedural paradigms.
            </p>
        </div>

        <div class="partition">
            <h2>Ownership and Borrowing</h2>
            <p>
                One of Rust's key features is ownership, a system that enables memory safety without garbage collection.
            </p>
            <p>
                Ownership rules:
            </p>
            <ul>
                <li>Each value in Rust has a variable that is its "owner".</li>
                <li>There can only be one owner at a time.</li>
                <li>When the owner goes out of scope, the value will be dropped.</li>
            </ul>
            <p>
                Example code:
            </p>
            <code>
                fn main() {
                let s1 = String::from("Hello");
                let s2 = s1; // Ownership moves from s1 to s2
                // println!("{}", s1); // This line would cause an error since s1 is no longer valid
                println!("{}", s2); // This is valid
                }
            </code>
        </div>

        <div class="partition">
            <h2>References and Borrowing</h2>
            <p>
                To allow multiple parts of the code to access the data without taking ownership, Rust introduces borrowing.
            </p>
            <p>
                Reference rules:
            </p>
            <ul>
                <li>References do not have ownership.</li>
                <li>References must always be valid.</li>
                <li>Only one mutable reference is allowed in a particular scope.</li>
            </ul>
            <p>
                Example code:
            </p>
            <code>
                fn main() {
                let s1 = String::from("Hello");
                let len = calculate_length(&s1); // Pass a reference to s1
                println!("The length of '{}' is {}.", s1, len);
                }

                fn calculate_length(s: &String) -> usize {
                s.len()
                }
            </code>
        </div>

        <div class="partition">
            <h2>Lifetimes</h2>
            <p>
                Lifetimes are annotations that indicate how long references live. They help prevent dangling references.
            </p>
            <p>
                Lifetime rules:
            </p>
            <ul>
                <li>Every reference has a lifetime.</li>
                <li>Lifetimes are a way of specifying the scope for which a reference is valid.</li>
            </ul>
            <p>
                Example code:
            </p>
            <code>
                fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {
                if s1.len() > s2.len() {
                s1
                } else {
                s2
                }
                }
            </code>
        </div>

        <div class="partition">
            <h2>Structs and Enums</h2>
            <p>
                Rust provides structs for creating custom data types with named fields and enums for defining enumerations.
            </p>
            <p>
                Example code:
            </p>
            <code>
                struct Point {
                x: i32,
                y: i32,
                }

                enum Shape {
                Circle(f64),
                Rectangle(f64, f64),
                Triangle(f64, f64, f64),
                }
            </code>
        </div>

        <div class="partition">
            <h2>Pattern Matching</h2>
            <p>
                Pattern matching in Rust is done through the match keyword, allowing for concise and expressive code.
            </p>
            <p>
                Example code:
            </p>
            <code>
                fn print_shape_area(shape: Shape) {
                match shape {
                Shape::Circle(radius) => println!("Area of circle: {}", 3.14 * radius * radius),
                Shape::Rectangle(width, height) => println!("Area of rectangle: {}", width * height),
                Shape::Triangle(a, b, c) => {
                let s = (a + b + c) / 2.0;
                let area = (s * (s - a) * (s - b) * (s - c)).sqrt();
                println!("Area of triangle: {}", area);
                }
                }
                }
            </code>
        </div>

        <div class="partition">
            <h2>Error Handling</h2>
            <p>
                Rust uses the Result enum for error handling. Functions can return a Result with either Ok(value) or Err(error).
            </p>
            <p>
                Example code:
            </p>
            <code>
                fn parse_number(s: &str) -> Result<i32, ParseIntError>
                    {
                    s.parse::<i32>
                        ()
                        }

                        fn main() {
                        let result = parse_number("42");
                        match result {
                        Ok(num) => println!("Parsed number: {}", num),
                        Err(err) => println!("Error: {:?}", err),
                        }
                        }
            </code>
        </div>

        <div class="partition">
            <h2>Concurrency</h2>
            <p>
                Rust provides built-in concurrency support with threads and the ownership system ensures thread safety.
            </p>
            <p>
                Example code:
            </p>
            <code>
                use std::thread;
                use std::time::Duration;

                fn main() {
                let handle = thread::spawn(|| {
                for i in 1..5 {
                println!("Thread: {}", i);
                thread::sleep(Duration::from_millis(500));
                }
                });

                for i in 1..3 {
                println!("Main thread: {}", i);
                thread::sleep(Duration::from_millis(1000));
                }

                handle.join().unwrap();
                }
            </code>
        </div>

        <div class="partition">
            <h2>Unsafe Rust</h2>
            <p>
                Rust allows unsafe code within blocks marked with the 'unsafe' keyword. This is often used for low-level operations.
            </p>
            <p>
                Example code:
            </p>
            <code>
                unsafe {
                println!("This is unsafe code.");
                }
            </code>
        </div>

        <div class="partition">
            <h2>Cargo - Rust Package Manager</h2>
            <p>
                Cargo is Rust's package manager and is used for managing Rust projects, including building, testing, and dependencies.
            </p>
            <p>
                Example commands:
            </p>
            <code>
                // Create a new Rust project
                cargo new my_project

                // Build the project
                cargo build

                // Run tests
                cargo test

                // Build and run the project
                cargo run
            </code>
        </div>

        <div class="partition">
            <h2>Conclusion</h2>
            <p>
                Rust is a powerful language that combines performance with safety. Its ownership system, borrowing, and lifetime concepts make it unique and effective for systems programming. With a growing ecosystem and an active community, Rust continues to gain popularity for a wide range of applications.
            </p>
        </div>
    </div>


    <div id="partitions">
        <h1>Rust Quiz</h1>
        <div class="partition">

            <div class="quiz-question" id="question1">
                <p>1. What is one of Rust's key features for achieving memory safety without garbage collection?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q1" value="a">Reference counting</li>
                    <li class="quiz-option"><input type="radio" name="q1" value="b">Automatic garbage collection</li>
                    <li class="quiz-option"><input type="radio" name="q1" value="c">Ownership system</li>
                    <li class="quiz-option"><input type="radio" name="q1" value="d">Heap memory management</li>
                </ul>
            </div>

            <div class="quiz-question" id="question2">
                <p>2. What does the Rust ownership system prevent?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q2" value="a">Data races</li>
                    <li class="quiz-option"><input type="radio" name="q2" value="b">Null pointer dereferencing</li>
                    <li class="quiz-option"><input type="radio" name="q2" value="c">Memory leaks</li>
                    <li class="quiz-option"><input type="radio" name="q2" value="d">Code duplication</li>
                </ul>
            </div>

            <div class="quiz-question" id="question3">
                <p>3. What does the 'lifetime' in Rust refer to?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q3" value="a">The duration a variable is in scope</li>
                    <li class="quiz-option"><input type="radio" name="q3" value="b">The time taken to compile the program</li>
                    <li class="quiz-option"><input type="radio" name="q3" value="c">The lifetime of a process</li>
                    <li class="quiz-option"><input type="radio" name="q3" value="d">The duration of execution for a specific function</li>
                </ul>
            </div>

            <div class="quiz-question" id="question4">
                <p>4. Which keyword is used to define a struct in Rust?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q4" value="a">class</li>
                    <li class="quiz-option"><input type="radio" name="q4" value="b">type</li>
                    <li class="quiz-option"><input type="radio" name="q4" value="c">struct</li>
                    <li class="quiz-option"><input type="radio" name="q4" value="d">def</li>
                </ul>
            </div>

            <div class="quiz-question" id="question5">
                <p>5. What is the purpose of the 'match' keyword in Rust?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q5" value="a">To define a function</li>
                    <li class="quiz-option"><input type="radio" name="q5" value="b">To declare a variable</li>
                    <li class="quiz-option"><input type="radio" name="q5" value="c">To perform pattern matching</li>
                    <li class="quiz-option"><input type="radio" name="q5" value="d">To create a loop</li>
                </ul>
            </div>

            <div class="quiz-question" id="question6">
                <p>6. How does Rust handle errors using the Result enum?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q6" value="a">Using try-catch blocks</li>
                    <li class="quiz-option"><input type="radio" name="q6" value="b">By throwing exceptions</li>
                    <li class="quiz-option"><input type="radio" name="q6" value="c">Returning a Result with Ok or Err</li>
                    <li class="quiz-option"><input type="radio" name="q6" value="d">Using assert statements</li>
                </ul>
            </div>

            <div class="quiz-question" id="question7">
                <p>7. How does Rust achieve thread safety with concurrency?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q7" value="a">By using global variables</li>
                    <li class="quiz-option"><input type="radio" name="q7" value="b">Through automatic memory management</li>
                    <li class="quiz-option"><input type="radio" name="q7" value="c">By enforcing ownership and borrowing rules</li>
                    <li class="quiz-option"><input type="radio" name="q7" value="d">By relying on garbage collection</li>
                </ul>
            </div>

            <div class="quiz-question" id="question8">
                <p>8. What keyword is used to denote unsafe code blocks in Rust?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q8" value="a">insecure</li>
                    <li class="quiz-option"><input type="radio" name="q8" value="b">unsafe</li>
                    <li class="quiz-option"><input type="radio" name="q8" value="c">risky</li>
                    <li class="quiz-option"><input type="radio" name="q8" value="d">dangerous</li>
                </ul>
            </div>

            <div class="quiz-question" id="question9">
                <p>9. What is Cargo in the context of Rust?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q9" value="a">A package manager</li>
                    <li class="quiz-option"><input type="radio" name="q9" value="b">A build tool</li>
                    <li class="quiz-option"><input type="radio" name="q9" value="c">A testing framework</li>
                    <li class="quiz-option"><input type="radio" name="q9" value="d">All of the above</li>
                </ul>
            </div>

            <div class="quiz-question" id="question10">
                <p>10. What is the main focus of Rust's ownership system?</p>

                <ul class="quiz-options radio-group">
                    <li class="quiz-option"><input type="radio" name="q10" value="a">Automated memory deallocation</li>
                    <li class="quiz-option"><input type="radio" name="q10" value="b">Concurrency control</li>
                    <li class="quiz-option"><input type="radio" name="q10" value="c">Memory safety without garbage collection</li>
                    <li class="quiz-option"><input type="radio" name="q10" value="d">Dynamic typing</li>
                </ul>
            </div>
        </div>
    </div>

    <div id="result-container">
        <button id="submit-btn" onclick="calculateScore()">Submit Answers</button>
        <p id="result"></p>
    </div>

    <script>
        function calculateScore() {
            // Array of correct answers
            const correctAnswers = ["c", "c", "a", "c", "c", "c", "c", "b", "d", "c"];
            // Get all radio groups
            const radioGroups = document.querySelectorAll('.radio-group');

            let score = 0;

            // Loop through each radio group
            radioGroups.forEach((group, index) => {
                // Get the selected answer
                const selectedAnswer = group.querySelector('input:checked');

                // Check if an answer is selected
                if (selectedAnswer) {
                    // Check if the selected answer is correct
                    if (selectedAnswer.value === correctAnswers[index]) {
                        score++;
                        // Highlight correct choice in green
                        selectedAnswer.parentNode.classList.add('correct-answer');
                    } else {
                        // Highlight incorrect choice in red
                        selectedAnswer.parentNode.classList.add('incorrect-answer');

                        // Find and highlight the correct choice in green
                        const correctChoice = group.querySelector(`input[value="${correctAnswers[index]}"]`);
                        if (correctChoice) {
                            correctChoice.parentNode.classList.add('correct-answer');
                        }
                    }
                }
            });

            // Display the result
            document.getElementById('result').innerText = `You scored ${score} out of ${correctAnswers.length}!`;
        }
    </script>
</main>